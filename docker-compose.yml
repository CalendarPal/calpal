version: "3.8"
services:
  reverse-proxy:
    image: traefik:latest
    command:
      - "--api.insecure=true"
      - "--providers.docker"
      - "--providers.docker.exposedByDefault=false"
    ports:
      # HTTP Port
      - "80:80"
      # Web UI
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
  postgres-account:
    image: "postgres:alpine"
    environment:
      - POSTGRES_PASSWORD=password
    ports:
      - "5432:5432"
    volumes:
      - "pgdata_account:/var/lib/postgresql/data"
    command:
      [
        "postgres",
        "-c",
        "log_statement=mod",
        "-c",
        "log_min_error_statement=ERROR",
      ]
  redis-account:
    image: "redis:alpine"
    ports:
      - "6379:6379"
    volumes:
      - "redisdata:/data"
  postgres-project:
    image: "postgres:alpine"
    environment:
      - POSTGRES_PASSWORD=password
    ports:
      - "5433:5432"
    volumes:
      - "pgdata_project:/var/lib/postgresql/data"
    command:
      [
        "postgres",
        "-c",
        "log_statement=mod",
        "-c",
        "log_min_error_statement=ERROR",
      ]
  account-server:
    build:
      context: ./account-server
      target: builder
    image: account-server
    env_file: ./account-server/.env.dev
    expose:
      - "8080"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.account-server.rule=Host(`calpal.test`) && PathPrefix(`/api/account`)"
    environment:
      - ENV=dev
    volumes:
      - ./account-server:/go/src/app
    depends_on:
      - postgres-account
      - redis-account
      - reverse-proxy
    command: reflex -r "\.go$$" -s -- sh -c "go run ./"
  account-client:
    build:
      context: ./account-client
    image: account-client
    expose:
      - "3000"
    ports:
      - "3000:3000"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.account-client.rule=Host(`calpal.test`) && PathPrefix(`/account`)"
    volumes:
      - ./account-client:/app
      - /app/node_modules
    depends_on:
      - reverse-proxy
  project-server:
    build:
      context: ./project-server
      target: builder
    image: project-server
    expose:
      - "8080"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.project-server.rule=Host(`calpal.test`) && PathPrefix(`/api`)"
    volumes:
      - ./project-server:/app
    depends_on:
      - postgres-project
    environment:
      - NODE_ENV=development
    command: ["npm", "run", "dev"]
  project-client:
    build:
      context: ./project-client
    image: project-client
    stdin_open: true
    expose:
      - "3000"
    ports:
      - "3003:3000"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.project-client.rule=Host(`calpal.test`)"
    volumes:
      - ./project-client:/app
      - /app/node_modules
volumes:
  pgdata_account:
  pgdata_project:
  redisdata:
